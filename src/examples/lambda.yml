description: |
  This example show how to pipeline to handle lambda deploys
usage:
  version: 2.1
  orbs:
    dft: dafiti-group/orb-standard-pipeline@1.2.0
  test_filters: &test_filters
    branches:
      only: [/^feature.*/, /^hotfix.*/]
  deployment_filters: &deployment_filters
    branches:
      only: [/^release.*/, /^hotfix.*/]
  head_filters: &head_filters
    branches:
      only: [master, main]
  release_filters: &release_filters
    branches:
      only: [/^release.*/]
  hotfix_filters: &hotfix_filters
    branches:
      only: [/^hotfix.*/]
  workflows:
    deployment-flow:
      jobs:
        # features & hotfix =============================================================================================
        - dft/sam-test:
            name: unit-test
            context: [SLACK, GITHUB, DEPLOY_QA]
            filters: *test_filters
        - dft/sonarqube:
            name: sonarqube
            context: [SLACK, SONAR]
            filters: *test_filters
        - dft/checkmarx:
            name: checkmarx
            context: [SLACK, GITHUB, CHECKMARX_CLOUD]
            filters: *test_filters
        # ===============================================================================================================
        # releases & hotfixes ===========================================================================================
        - dft/hold-slack:
            name: slack-notify-hold-qa
            context: [SLACK]
            step_name: "A new release is awaiting your approve"
            filters: *release_filters
        - approval:
            name: start-to-qa
            type: approval
            filters: *release_filters
        - dft/hold-slack:
            name: slack-notify-hold-hotfix
            context: [SLACK]
            step_name: "The hotfix is waiting your approval to deploy"
            filters: *hotfix_filters
            requires: [unit-test, sonarqube, checkmarx]
        - approval:
            name: approve-to-qa
            type: approval
            filters: *hotfix_filters
            requires: [unit-test, sonarqube, checkmarx]
        - dft/sam-deploy:
            name: deploy-to-qa
            s3-bucket: dft-qa-repo
            context: [SLACK, DEPLOY_QA]
            filters: *deployment_filters
            requires:
              [unit-test, sonarqube, checkmarx, approve-to-qa, start-to-qa]
        - dft/instana-notify:
            name: feedback-instana-qa
            context: [SLACK, INSTANA, DEPLOY_QA]
            requires: [deploy-to-qa]
        - dft/grafana-notify:
            name: grafana-notify-qa
            context: [SLACK, GRAFANA]
            target_env: qa
            requires: [deploy-to-qa]
        # =============================================================================================================
        # github action to approve this release/hotfix PR to proceed
        - dft/github-approve:
            name: dft-deploy-approve-pr
            context: [SLACK, GITHUB]
            requires: [deploy-to-qa]
        # ===============================================================================================================
        # master & live delivery ========================================================================================
        - dft/github-update:
            name: review-open-pr-to-force-update
            context: [SLACK, GITHUB]
            filters: *head_filters
        - dft/hold-slack:
            name: slack-notify-hold-production
            context: SLACK
            step_name: "Pipeline waiting approval to promote to production"
            filters: *head_filters
        - approval:
            type: approval
            name: approve-deploy-production
            filters: *head_filters
        - dft/sam-deploy:
            name: deploy-to-live
            s3-bucket: dft-live-repo
            context: [SLACK, DEPLOY_LIVE]
            requires:
              [approve-deploy-production, review-open-pr-to-force-update]
        - dft/instana-notify:
            name: feedback-instana-production
            context: [SLACK, INSTANA, DEPLOY_LIVE]
            requires: [deploy-to-live]
        - dft/grafana-notify:
            name: grafana-notify-live
            context: [SLACK, GRAFANA]
            target_env: live
            requires: [deploy-to-live]
        # ===============================================================================================================
