description: |
  An example showing how to deploy some artifacts inside a S3 bucket
usage:
  version: 2.1
  # including dft org
  orbs:
    dft: dafiti-group/orb-standard-pipeline@3.2.0
  # reserved filters anchors
  test_filters: &test_filters
    branches:
      only: [/^feature.*/, /^hotfix.*/]
  deployment_filters: &deployment_filters
    branches:
      only: [/^release.*/, /^hotfix.*/]
  head_filters: &head_filters
    branches:
      only: [master, main]
  release_filters: &release_filters
    branches:
      only: [/^release.*/]
  hotfix_filters: &hotfix_filters
    branches:
      only: [/^hotfix.*/]
  # declaring your workflows
  workflows:
    deployment-flow:
      jobs:
        # features & hotfix =============================================================================================
        - dft/unit-test:
            name: unit-test
            context: [DEFAULT]
            filters: *test_filters
        - dft/sonarqube:
            name: sonarqube
            context: [DEFAULT]
            filters: *test_filters
        # WFA
        # - dft/checkmarx:
        #     name: checkmarx
        #     context: [DEFAULT]
        #     filters: *test_filters
        # releases & hotfixes ===========================================================================================
        - dft/hold-slack:
            name: slack-notify-hold-qa
            context: [DEFAULT]
            step_name: "A new release is awaiting your approve"
            filters: *release_filters
        - approval:
            name: start-to-qa
            type: approval
            filters: *release_filters
        - dft/hold-slack:
            name: slack-notify-hold-hotfix
            context: [DEFAULT]
            step_name: "The hotfix is waiting your approval to deploy"
            filters: *hotfix_filters
            # requires: [unit-test, sonarqube]
        - approval:
            name: approve-to-qa
            type: approval
            filters: *hotfix_filters
            # requires: [unit-test, sonarqube]
        - dft/deploy-to-s3:
            name: build-and-upload-qa
            bucket: "s3://dft-static-qa/react-external-components"
            context: [DEFAULT, QA]
            filters: *deployment_filters
            requires: [approve-to-qa, start-to-qa]
        # =========================================================================
        # TODO: when the staging cluster is available, uncoment the section below
        # - approval:
        #     name: approve-to-staging
        #     type: approval
        #     requires: [deploy-to-qa]
        # - dft/eks-deploy:
        #     name: promote-qa-to-staging
        #     argo_path: argo/clusters/eks-staging-dafiti/apps
        #     context: [DEFAULT]
        #     requires:
        #       - approve-to-staging
        # =========================================================================
        - dft/github-approve:
            name: dft-deploy-approve-pr
            context: [DEFAULT]
            # requires: [promote-qa-to-staging] # when staging is up and running, use this instead of the below
            requires: [build-and-upload-qa]
        # ==============================================================================================================
        # master & live delivery =======================================================================================
        - dft/github-update:
            name: git-force-update
            context: [DEFAULT]
            filters: *head_filters
        - dft/hold-slack:
            name: slack-notify-hold-live
            context: [DEFAULT]
            step_name: "Pipeline waiting approval to promote to live"
            filters: *head_filters
        - approval:
            type: approval
            name: approve-deploy-live
            filters: *head_filters
        - dft/deploy-to-s3:
            name: build-and-upload-live
            bucket: "s3://dft-stor-us-east/react-external-components"
            context: [DEFAULT, LIVE_AWS_DAFITI]
            filters: *head_filters
            requires: [approve-deploy-live]
        - dft/grafana-notify:
            name: grafana-notify-live
            target_env: live
            context: [DEFAULT]
            requires: [build-and-upload-live]
        # ===============================================================================================================
