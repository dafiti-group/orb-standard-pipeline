description: |
  Deploys artifacts to a S3 bucket, based on a Dockerfile build. IMPORTANT: The last step on the Dockerfile is supposed to contain only the artifacts to be deployed! Using a scratch image recommended!
  Needs:
    context: [DEFAULT, (LIVE|QA|LIVE_AWS_DAFITI)]
parameters:
  bucket:
    type: string
    description: The bucket to deploy the artifacts, including the path inside the bucket
  use_docker_build:
    type: boolean
    default: true
    description: Used to run a docker build and use the output files to upload to S3
  folder:
    type: string
    default: ./out
    description: The folder in the repo that contains the artifacts to be deployed
  arguments:
    type: string
    description: Arguments to be used in S3 aws-s3/sync
  runner:
    type: executor
    default: base
    description: |
      base image to run the pipeline
      Available options inside orb is [node, golang]
      To use those executors from this orb, use the sintaxe :
      ```yaml
        version: 2.1
        ...
        executors:
          my-executor:
            docker:
              - image: my-image:lts
        workflows:
          deployment-flow:
            jobs:
              ...
              - dft/sam-test:
                  name: unit-test
                  runner: dft/node
              - dft/sam-test:
                  name: unit-test
                  runner: dft/golang
              # using outside orb executor
              - dft/sam-test:
                  name: unit-test
                  runner: my-executor
      ```
      To use a customized runner, see this documentation https://circleci.com/docs/reusing-config#executor
      Use CircleCI images -> https://circleci.com/developer/images
executor: <<parameters.runner>>
steps:
  - checkout
  - when:
      condition: <<parameters.use_docker_build>>
      steps:
        - config_docker
        #using DOCKER_BUILDKIT=1 to output the files generated inside the build
        - run:
            name: build artifact
            command: DOCKER_BUILDKIT=1 docker build -t deploy-to-s3 -o <<parameters.folder>> .
        - store_artifacts:
            path: out/
  - aws-s3/sync:
      from: <<parameters.folder>>
      to: <<parameters.bucket>>
      arguments: <<parameters.arguments>>
  - slack/notify:
      event: fail
      custom: <<include(templates/fail.json)>>
