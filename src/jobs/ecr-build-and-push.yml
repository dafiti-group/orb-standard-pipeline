description: |
  Job to create your application AWS ECR artifact and push docker images to it
  Needs:
    context: [DEFAULT]
parameters:
  repo_name:
    type: string
    default: ${CIRCLE_PROJECT_REPONAME}
    description: The aws ecr registry name
  rev_txt_path:
    type: string
    default: rev.txt
    description: The place to create/update rev.txt file content
  extra-build-args:
    type: string
    default: >-
      --build-arg GITHUB_TOKEN=${GITHUB_TOKEN}
    description: |
      Extra docker build image parameters
      By default the GITHUB_TOKEN is already included, if you need to pass
      more extra build args, you need to pass full list of your build args like
        --build-arg GITHUB_TOKEN=${GITHUB_TOKEN}
        --build-arg ANOTHER_PARAMETER=${ANOTHER_PARAMETER}
  build_tag:
    type: string
    default: "$(echo ${CIRCLE_SHA1:0:7}),latest"
    description: |
      The artifact tag name or names comma separated
      Default value is the first 7 characters of current commit and latest tag
  custom_steps:
    type: steps
    description: |
      Custom step to run before docker build
    default: []
  runner:
    type: executor
    default: base
    description: |
      base image to run the pipeline
      Available options inside orb is [node, golang]
      To use those executors from this orb, use the sintaxe :
      ```yaml
        version: 2.1
        ...
        executors:
          my-executor:
            docker:
              - image: my-image:lts
        workflows:
          deployment-flow:
            jobs:
              ...
              - dft/sam-test:
                  name: unit-test
                  runner: dft/node
              - dft/sam-test:
                  name: unit-test
                  runner: dft/golang
              # using outside orb executor
              - dft/sam-test:
                  name: unit-test
                  runner: my-executor
      ```
      To use a customized runner, see this documentation https://circleci.com/docs/reusing-config#executor
      Use CircleCI images -> https://circleci.com/developer/images
  dockerfile:
    type: string
    default: Dockerfile
    description: The path/file name of customized docker file
  docker_version:
    type: string
    description: The docker version to setup builds, Find more at <https://circleci.com/docs/building-docker-images/#docker-version>
    default: "default"
  no_output_timeout:
    default: 10m
    description: >
      The amount of time to allow the docker build command to run before timing
      out (default is `10m`)
    type: string
  path:
    default: .
    description: >-
      Path to the directory containing your Dockerfile and build context.
      Defaults to . (working directory).
    type: string
executor: <<parameters.runner>>
steps:
  - checkout
  - config_docker:
      version: <<parameters.docker_version>>
  - aws-ecr/ecr-login
  - rev_txt:
      rev_txt_path: <<parameters.rev_txt_path>>
  - steps: <<parameters.custom_steps>>
  - aws-ecr/build-and-push-image:
      checkout: false
      # create-repo: true # TODO: needs to talk about it with SRE team
      repo: <<parameters.repo_name>>
      tag: <<parameters.build_tag>>
      extra-build-args: <<parameters.extra-build-args>>
      dockerfile: <<parameters.dockerfile>>
      no-output-timeout: <<parameters.no_output_timeout>>
      path: <<parameters.path>>
  - slack/notify:
      event: fail
      custom: <<include(templates/fail.json)>>
