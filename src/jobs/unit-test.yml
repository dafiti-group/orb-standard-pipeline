description: |
  Use the default layer of your `docker-compose.yml` file to run ci layer as
  `docker-compose run --rm ci` to run all needed tests.
  Needs:
    context: [DEFAULT]
parameters:
  build_extra_services:
    type: string
    default: ""
    description: Use to include more than ci service to build
  build_args:
    type: string
    default: ""
    description: >
      Used to pass aditional docker build args like: `--build-arg GITHUB_TOKEN=${GITHUB_TOKEN}`
  has_coverage:
    type: boolean
    default: false
    description: Used to enable coverage
  coverage_file:
    type: string
    default: ""
    description: "the file name to be copyed from container to workspace"
  container_work_dir:
    type: string
    default: /app/
    description: The root path inside docker container where your project is to copy coverage file
  runner:
    type: executor
    default: base
    description: |
      base image to run the pipeline
      Available options inside orb is [node, golang]
      To use those executors from this orb, use the sintaxe :
      ```yaml
        version: 2.1
        ...
        executors:
          my-executor:
            docker:
              - image: my-image:lts
        workflows:
          deployment-flow:
            jobs:
              ...
              - dft/sam-test:
                  name: unit-test
                  runner: dft/node
              - dft/sam-test:
                  name: unit-test
                  runner: dft/golang
              # using outside orb executor
              - dft/sam-test:
                  name: unit-test
                  runner: my-executor
      ```
      To use a customized runner, see this documentation https://circleci.com/docs/reusing-config#executor
      Use CircleCI images -> https://circleci.com/developer/images
executor: <<parameters.runner>>
steps:
  - checkout
  - config_docker
  - aws-ecr/ecr-login
  - run:
      name: default workarround to fix docker-dafiti_default_network issue
      command: docker network create docker-dafiti_default || true
  - run:
      name: Build ci image test
      command: docker-compose build <<parameters.build_args>> ci <<parameters.build_extra_services>>
  - run:
      name: Run unit tests
      command: docker-compose run --name dafiti_ci ci
  - when:
      condition:
        equal: [true, <<parameters.has_coverage>>]
      steps:
        - run:
            name: copy file from container to local
            command: docker cp dafiti_ci:<<parameters.container_work_dir>><<parameters.coverage_file>> .
        - persist_to_workspace:
            root: .
            paths:
            - <<parameters.coverage_file>>
  - slack/notify:
      event: fail
      custom: <<include(templates/fail.json)>>
